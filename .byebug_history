c
@reviews.find(1).joins(:user)
@reviews.find(1).joins(:users)
@reviews.find(1).joins(:user)
@reviews.find(1).includes(:user)
@reviews.find(1)
User.all
@reviews.find(1)
@reviews.last
@reviews
@reviews.find(1)
User.all
users.all
@reviews.last
@reviews.joins(:user)
@reviews.join(:user)
@reviews.join(:users)
@reviews.includes(:user)
@reviews
@review
@review.includes(:user)
@reviews = Review.all
reviews.includes(:user)
@a.first
@a = User.includes(:reviews)
a=_
User.includes(:reviews)
@reviews = Review.includes(:user)
@reviews.first
@reviews
@reviews = Review.includes(:user)
@reviews
@reviews = Review.includes(:users)
Review.includes(:users)
Review.all
reviews.all
reviews
businesses.includes
businesses.includes(:reviews)
businesses
businesses.review
businesses.reviews
c
businesses.first.img1
businesses.first
businesses
c
e
businesses
c
      .having("count(businesses.id) > 
businesses.joins(:reviews).group("businesses.id")
businesses.joins(:reviews)
businesses.joins(:reviews).where('1=1')
businesses.joins(:reviews).where('1'='1')
businesses.joins(:reviews).where(1=1)
businesses.joins(:reviews).where(:rating > 1)
businesses.joins(:reviews)
businesses.joins(:review)
businesses.joins(:reviews)
businesses
c
businesses.joins(:reviews).first.rating
businesses.joins(:reviews).first
businesses.joins(:reviews)
businesses.joins(:reviews).group("businesses.id")
businesses.joins(:reviews).group("businesses.id").first.rating
businesses.joins(:reviews).group("businesses.id").first
businesses.joins(:reviews).group("businesses.id")
businesses.joins(:reviews).group("businesses.id").having("AVG(rating) > ?", 1)
businesses.joins(:reviews).group("businesses.id").having("AVG(rating) > ?", params[:review].to_i)
businesses
c
businesses
c
@businesses
@business
c
s
businesses
c
@businesses
c
@businesses
c
@businesses
c
businesses.class
c
businesses.class
businesses[1].review_count.class
businesses[1].review_count
businesses
c
businesse
businesses
businesses.where("review_count >= ?", params[:reviewCount])
businesses
c
businesses.select {|business| business.review_count > 1}
businesses.map {|business| business.review_count > 1}
businesses.map {|business| business.review_count > 9}
businesses.each {|business| business.review_count > 9}
businesses.each {|business| business.review_count > 1}
businesses.where(|business| business.review_count > 1)
businesses[1].review_count
businesses.first.review_count
businesses.first
businesses
business
c
params[:prices]
c
params[:prices].min.to_i
params[:prices].max
params
c
params[:prices].max
params[:prices].min.to_i
c
params[:prices].min.to_i
params[:prices].min
params[:prices].max
params[:prices]
params
c
params[:prices]
params[:price]
params
c
@businesses.includes(:reviews)
@businesses
@businesses.reviews.count
@businesses.reviews
@businesses
c
businesses.class
businesses
c
Business.first.reviews
businesses.first.reviews
businesses.first.review_count
Business.first.review_count
Business.first
Business.review_count
Business.average_rating
Business.average_ratings
businesses.first.reviews.average(:rating)
businesses.first.reviews.count
businesses.first.average_rating
businesses.first.review_count
businesses.first
businesses
review_count
businesses
businesses.where("review_count >= ?", params[:reviewCount])
params
c
params
c
Business.in_bounds(bounds)
Buiness.in_bounds(bounds)
bounds
c
params[:bounds]
params
bounds
businesses
c
business_params
exit
business_params
exit
business_params
exit
review.save
Review.new(review_params)
review
]
